# -*- coding: utf-8 -*-
"""Stock price predictor LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GSeRC-ormA7LtjjhLQTcxNMx6B4vP7o2
"""

import pandas_datareader as pdr

key='98d3ffe1bab081914b49ac506c2afe2aae3987b2'

import requests
import pandas as pd

# Define the Tiingo API endpoint
url = "https://api.tiingo.com/tiingo/daily/AAPL/prices"
params = {
    'token': '98d3ffe1bab081914b49ac506c2afe2aae3987b2',
    'startDate': '2010-01-01',
    'endDate': '2024-12-13'
}

response = requests.get(url, params=params)
data = response.json()

# Convert to DataFrame and inspect
df = pd.DataFrame(data)
print(df.head())  # Check if multiple rows are returned

#  TO CSV
df.to_csv('AAPL.csv', index=False)

"""## CSV"""

# df = pdr.get_data_tiingo('AAPL', api_key=key)
# print(df)
# df.to_csv('AAPL.csv')

print(df.shape)
print(df.head(5))





import pandas as pd

df=pd.read_csv('AAPL.csv')
df.head()

df2=df.reset_index()
df2.head(5)

df2[1228:]

df1=df.reset_index()['close']

import matplotlib.pyplot as plt

plt.plot(df1)

import numpy as np

# LSTM is sensititve to the scale of the data so use MinMax Scaler

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))
print(df1)

df1.shape

len(df1)
df1.shape

#splitting training data and testing data
training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]



# # 120,130,140,150,160,170
# dataX: The "input" or "past" data used for prediction.
# dataY: The "output" or "future" data you want to predict.
#  if timestep=3 then the first 3 values are considered and the 4th one is predicted

import numpy as np
#converting an array of values into a dataset matrix
def create_dataset(dataset, time_step=1):#3763
    dataX, dataY = [], []
    for i in range(len(dataset)-time_step-1): # 3761
        a = dataset[i:(i+time_step), 0]
        dataX.append(a)
        dataY.append(dataset[i + time_step, 0])
    return np.array(dataX), np.array(dataY)

time_step = 100
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

print(X_train,y_train)

print(X_train.shape)
print(y_train.shape)

print(X_test.shape)
print(ytest.shape)

# reshape the input to be [samples, time steps, features]
X_train=X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test=X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

print(X_train.shape,X_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

# Transform back to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

len(train_predict)

print(train_predict,test_predict)

# Calculate RMSE
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

#  Test Data RMSE
math.sqrt(mean_squared_error(ytest,test_predict))

#plotting
# shift train prediction for plotting
look_back=100
trainPredictPlot = np.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict
# shift test prediction for plotting
testPredictPlot = np.empty_like(df1)
testPredictPlot[:, :] = np.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict
# Plot baseline and predictions
plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()



len(test_data)

x_input=test_data[1218:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
print(temp_input[0])
temp_input=temp_input[0].tolist()
print(temp_input)

# prediction for next 10 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
  if(len(temp_input)>100):
    # print(temp_input)
    x_input=np.array(temp_input[1:])
    print("{} day input {}".format(i,x_input))
    x_input=x_input.reshape(1,-1)
    x_input = x_input.reshape((1, n_steps, 1))
    print(x_input)
    yhat = model.predict(x_input, verbose=0)
    print("{} day output {}".format(i,yhat))
    temp_input.extend(yhat[0].tolist())
    temp_input=temp_input[1:]
    # print(temp_input)
    lst_output.extend(yhat.tolist())
    i=i+1
  else:
    x_input = x_input.reshape((1, n_steps,1))
    yhat = model.predict(x_input, verbose=0)
    print(yhat[0])
    temp_input.extend(yhat[0].tolist())
    print(len(temp_input))
    lst_output.extend(yhat.tolist())
    i=i+1

print(lst_output)

print(len(temp_input))
temp_input



day_new=np.arange(1,101)
day_pred=np.arange(101,131)

len(df1)

plt.plot(day_new,scaler.inverse_transform(df1[3663:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))

df3=df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3=scaler.inverse_transform(df3).tolist()

plt.plot(df3)

